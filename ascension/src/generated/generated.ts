/* Autogenerated file. Do not edit manually. */

import { Account } from "starknet";
import { DojoProvider } from "@dojoengine/core";
import { BigNumberish } from "starknet";
import { Direction } from "../utils/index";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
    function actions() {
        const contract_name = "actions";

        const spawn = async ({ account, timestamp, username, gameId }: { account: Account, timestamp: BigNumberish, username: string, gameId: BigNumberish  }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "spawn",
                    [timestamp, username, gameId]
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };

        const leaveGame = async ({ 
            account, 
            timestamp,
            gameId, 
        }: { 
            account: Account, 
            timestamp: BigNumberish  
            gameId: BigNumberish,
        }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "leaveGame",
                    [timestamp, gameId]
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
        
        const increaseRange = async ({ 
            account, 
            timestamp,
            gameId, 
        }: { 
            account: Account, 
            timestamp: BigNumberish  
            gameId: BigNumberish,
        }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "increaseRange",
                    [gameId, timestamp]
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
        
        const claimActionPoint = async ({ 
            account, 
            timestamp,
            gameId, 
        }: { 
            account: Account, 
            timestamp: BigNumberish  
            gameId: BigNumberish,
        }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "claimActionPoint",
                    [gameId, timestamp]
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
      
        const startMatch = async ({ 
            account, 
            gameId, 
            playersSpawned, 
            startTime 
        }: { 
            account: Account, 
            gameId: BigNumberish, 
            playersSpawned: number, 
            startTime: BigNumberish  
        }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "startMatch",
                    [gameId, playersSpawned, startTime]
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };

        const move = async ({
            account,
            timestamp,
            gameId,
            dir,
        }: {
            account: Account;
            timestamp: BigNumberish;
            gameId: BigNumberish,
            dir: Direction;
        }) => {
            try {
                return await provider.execute(
                    account, 
                    contract_name, 
                    "move", 
                    [timestamp, gameId, dir]
                );
            } catch (error) {
                console.error("Error executing move:", error);
                throw error;
            }
        };
        return { spawn, startMatch, move, leaveGame, increaseRange, claimActionPoint };
    }
    return {
        actions: actions(),
    };
}